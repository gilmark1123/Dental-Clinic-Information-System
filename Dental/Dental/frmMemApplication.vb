Imports MySql.Data.MySqlClient
Imports System.IO
Imports System.IO.Stream
Imports System
Imports System.Diagnostics
Imports System.Drawing
Imports System.Runtime.InteropServices
Imports System.Windows.Forms
Imports DirectShowLib
Imports System.Runtime.InteropServices.ComTypes
Imports System.Threading
Imports System.Drawing.Drawing2D
Imports System.Globalization

Public Class frmMemApplication

    Dim selfEmp, govEmp, compEmp, employment As Integer
    Dim nbi, pol, brgy, clearances As Integer
    Private _id As Integer


#Region "Image Capture declaration"
    Enum PlayState
        Stopped
        Paused
        Running
        Init
    End Enum

    Dim CurrentState As PlayState = PlayState.Stopped
    Private m_bRunning As Boolean = False
    Private pTake As Boolean = False

    Dim D As Integer = Convert.ToInt32("0X8000", 16)
    Public WM_GRAPHNOTIFY As Integer = D + 1

    Dim VideoWindow As IVideoWindow = Nothing
    Dim MediaControl As IMediaControl = Nothing
    Dim MediaEventEx As IMediaEventEx = Nothing
    Dim GraphBuilder As IGraphBuilder = Nothing
    Dim CaptureGraphBuilder As ICaptureGraphBuilder2 = Nothing

    Dim rot As DsROTEntry = Nothing

    <DllImport("gdi32.dll")>
    Private Shared Function CreateCompatibleBitmap(hdc As IntPtr, nWidth As Integer, nHeight As Integer) As IntPtr
    End Function

    Private Declare Function GetDC Lib "user32.dll" Alias "GetDC" (ByVal hWnd As IntPtr) As IntPtr
    Private Declare Function CreateCompatibleDC Lib "gdi32.dll" (hdc As IntPtr) As IntPtr
    Public Declare Function ReleaseDC Lib "user32.dll" (ByVal hWnd As Long, ByVal prmlngHDc As Long) As Long
    Public Declare Function SelectObject Lib "gdi32.dll" (ByVal prmlngHDc As Long, ByVal hObject As Long) As Long
    Declare Auto Function BitBlt Lib "GDI32.DLL" (ByVal hdcDest As IntPtr, ByVal nXDest As Integer,
     ByVal nYDest As Integer, ByVal nWidth As Integer,
     ByVal nHeight As Integer, ByVal hdcSrc As IntPtr,
     ByVal nXSrc As Integer, ByVal nYSrc As Integer,
     ByVal dwRop As Int32) As Boolean
#End Region

#Region "Camera event"
    Private Sub GetInterfaces()
        Dim hr As Integer = 0
        Me.GraphBuilder = CType(New FilterGraph, IGraphBuilder)
        Me.CaptureGraphBuilder = CType(New CaptureGraphBuilder2, ICaptureGraphBuilder2)
        Me.MediaControl = CType(Me.GraphBuilder, IMediaControl)
        Me.VideoWindow = CType(Me.GraphBuilder, IVideoWindow)
        Me.MediaEventEx = CType(Me.GraphBuilder, IMediaEventEx)
        hr = Me.MediaEventEx.SetNotifyWindow(Me.Handle, WM_GRAPHNOTIFY, IntPtr.Zero) 'This method designates a window as the recipient of messages generated by or sent to the current DirectShow object
        DsError.ThrowExceptionForHR(hr) 'ThrowExceptionForHR is a wrapper for Marshal.ThrowExceptionForHR, but additionally provides descriptions for any DirectShow specific error messages.If the hr value is not a fatal error, no exception will be thrown:
        Debug.WriteLine("I started Sub Get interfaces , the result is : " & DsError.GetErrorText(hr))
    End Sub

    Public Function FindCaptureDevice() As IBaseFilter
        Debug.WriteLine("Start the Sub FindCaptureDevice")
        Dim hr As Integer = 0
        Dim classEnum As IEnumMoniker = Nothing
        Dim moniker As IMoniker() = New IMoniker(0) {}
        Dim source As Object = Nothing
        Dim devEnum As ICreateDevEnum = CType(New CreateDevEnum, ICreateDevEnum)
        hr = devEnum.CreateClassEnumerator(FilterCategory.VideoInputDevice, classEnum, 0)
        Debug.WriteLine("Create an enumerator for the video capture devices : " & DsError.GetErrorText(hr))
        DsError.ThrowExceptionForHR(hr)
        Marshal.ReleaseComObject(devEnum)
        If classEnum Is Nothing Then
            Throw New ApplicationException("No video capture device was detected.\r\n\r\n" &
                           "This sample requires a video capture device, such as a USB WebCam,\r\n" &
                           "to be installed and working properly.  The sample will now close.")
        End If
        If classEnum.Next(moniker.Length, moniker, IntPtr.Zero) = 0 Then
            Dim iid As Guid = GetType(IBaseFilter).GUID
            moniker(0).BindToObject(Nothing, Nothing, iid, source)
        Else
            Throw New ApplicationException("Unable to access video capture device!")
        End If
        Marshal.ReleaseComObject(moniker(0))
        Marshal.ReleaseComObject(classEnum)
        Return CType(source, IBaseFilter)
    End Function

    Public Sub SetupVideoWindow()
        Dim hr As Integer = 0
        'set the video window to be a child of the main window
        'putowner : Sets the owning parent window for the video playback window. 
        hr = Me.VideoWindow.put_Owner(picPreviewClientID.Handle)
        DsError.ThrowExceptionForHR(hr)

        hr = Me.VideoWindow.put_WindowStyle(WindowStyle.Child Or WindowStyle.ClipChildren)
        If Not (VideoWindow Is Nothing) Then 'if the videopreview is not nothing
            VideoWindow.SetWindowPosition(0, 0, picPreviewClientID.Width, picPreviewClientID.Height)
        End If
        DsError.ThrowExceptionForHR(hr)

        'Use helper function to position video window in client rect of main application window
        'ResizeVideoWindow()

        'Make the video window visible, now that it is properly positioned
        'put_visible : This method changes the visibility of the video window. 
        hr = Me.VideoWindow.put_Visible(OABool.True)
        DsError.ThrowExceptionForHR(hr)
    End Sub

    Protected Overloads Sub WndProc(ByRef m As Message)
        Select Case m.Msg
            Case WM_GRAPHNOTIFY
                HandleGraphEvent()
        End Select
        If Not (Me.VideoWindow Is Nothing) Then
            Me.VideoWindow.NotifyOwnerMessage(m.HWnd, m.Msg, CType(m.WParam.ToInt32, IntPtr), CType(m.LParam.ToInt32, IntPtr))
        End If
        MyBase.WndProc(m)
    End Sub

    Public Sub HandleGraphEvent()
        Dim hr As Integer = 0
        Dim evCode As EventCode
        Dim evParam1 As Integer
        Dim evParam2 As Integer
        If Me.MediaEventEx Is Nothing Then
            Return
        End If
        While Me.MediaEventEx.GetEvent(evCode, CType(evParam1, IntPtr), CType(evParam2, IntPtr), 0) = 0
            '// Free event parameters to prevent memory leaks associated with
            '// event parameter data.  While this application is not interested
            '// in the received events, applications should always process them.
            hr = Me.MediaEventEx.FreeEventParams(evCode, CType(evParam1, IntPtr), CType(evParam2, IntPtr))
            DsError.ThrowExceptionForHR(hr)

            '// Insert event processing code here, if desired
        End While
    End Sub

    Private Sub CaptureVideo()

        Dim hr As Integer = 0
        Dim sourceFilter As IBaseFilter = Nothing

        Try
            If (m_bRunning = False) Then

                GetInterfaces()

                hr = Me.CaptureGraphBuilder.SetFiltergraph(Me.GraphBuilder) 'Specifies filter graph "graphbuilder" for the capture graph builder "captureGraphBuilder" to use.
                Debug.WriteLine("Attach the filter graph to the capture graph : " & DsError.GetErrorText(hr))
                DsError.ThrowExceptionForHR(hr)

                sourceFilter = FindCaptureDevice()

                hr = Me.GraphBuilder.AddFilter(sourceFilter, "Video Capture")
                Debug.WriteLine("Add capture filter to our graph : " & DsError.GetErrorText(hr))
                DsError.ThrowExceptionForHR(hr)

                hr = Me.CaptureGraphBuilder.RenderStream(PinCategory.Preview, MediaType.Video, sourceFilter, Nothing, Nothing)
                Debug.WriteLine("Render the preview pin on the video capture filter : " & DsError.GetErrorText(hr))
                DsError.ThrowExceptionForHR(hr)

                Marshal.ReleaseComObject(sourceFilter)

                SetupVideoWindow()

                rot = New DsROTEntry(Me.GraphBuilder)

                hr = Me.MediaControl.Run()
                Debug.WriteLine("Start previewing video data : " & DsError.GetErrorText(hr))
                DsError.ThrowExceptionForHR(hr)

                Me.CurrentState = PlayState.Running
                Debug.WriteLine("The currentstate : " & Me.CurrentState.ToString)

                m_bRunning = True
            End If

        Catch ex As Exception
            MessageBox.Show("An unrecoverable error has occurred.With error : " & ex.ToString)
        End Try
    End Sub

    Public Sub ChangePreviewState(ByVal showVideo As Boolean)
        Dim hr As Integer = 0
        '// If the media control interface isn't ready, don't call it
        If Me.MediaControl Is Nothing Then
            Debug.WriteLine("MediaControl is nothing")
            Return
        End If
        If showVideo = True Then
            If Not (Me.CurrentState = PlayState.Running) Then
                Debug.WriteLine("Start previewing video data")
                hr = Me.MediaControl.Run
                Me.CurrentState = PlayState.Running
            End If
        Else
            Debug.WriteLine("Stop previewing video data")
            hr = Me.MediaControl.StopWhenReady
            Me.CurrentState = PlayState.Stopped
        End If
    End Sub

    ' <summary> Shut down capture </summary>
    Private Sub CloseInterfaces()

        Me.Cursor = Cursors.WaitCursor

        '//stop previewing data
        If Not (Me.MediaControl Is Nothing) Then
            Me.MediaControl.StopWhenReady()

            m_bRunning = False
            btnStart.Enabled = True
            btnTake.Enabled = False
            btnRetake.Enabled = False
        End If

        Me.CurrentState = PlayState.Stopped

        '//stop recieving events
        If Not (Me.MediaEventEx Is Nothing) Then
            Me.MediaEventEx.SetNotifyWindow(IntPtr.Zero, WM_GRAPHNOTIFY, IntPtr.Zero)
        End If

        '// Relinquish ownership (IMPORTANT!) of the video window.
        '// Failing to call put_Owner can lead to assert failures within
        '// the video renderer, as it still assumes that it has a valid
        '// parent window.
        If Not (Me.VideoWindow Is Nothing) Then
            Me.VideoWindow.put_Visible(OABool.False)
            Me.VideoWindow.put_Owner(IntPtr.Zero)
        End If

        ' // Remove filter graph from the running object table
        If Not (rot Is Nothing) Then
            rot.Dispose()
            rot = Nothing
        End If

        '// Release DirectShow interfaces
        Marshal.ReleaseComObject(Me.MediaControl) : Me.MediaControl = Nothing
        Marshal.ReleaseComObject(Me.MediaEventEx) : Me.MediaEventEx = Nothing
        Marshal.ReleaseComObject(Me.VideoWindow) : Me.VideoWindow = Nothing
        Marshal.ReleaseComObject(Me.GraphBuilder) : Me.GraphBuilder = Nothing
        Marshal.ReleaseComObject(Me.CaptureGraphBuilder) : Me.CaptureGraphBuilder = Nothing

        Me.Cursor = Cursors.Default
    End Sub

    Private Sub btnTake_Click(sender As Object, e As EventArgs) Handles btnTake.Click

        Try

            Me.Cursor = Cursors.WaitCursor

            MediaControl.Pause()
            Dim bmp As New Bitmap(picPreviewClientID.Width, picPreviewClientID.Height)
            Using g As Graphics = Graphics.FromImage(bmp)
                Dim pt As Point = picPreviewClientID.PointToScreen(New Point(0, 0))
                g.CopyFromScreen(pt.X, pt.Y, 0, 0, bmp.Size)
            End Using
            picCaptureClientID.Image = bmp
            MediaControl.Run()

            'stop 
            CloseInterfaces()
            btnRetake.Enabled = True
            btnStart.Enabled = False
            btnTake.Enabled = False

            picPreviewClientID.Visible = False
            picCaptureClientID.Visible = True
            Me.Cursor = Cursors.Default
        Catch
            MsgBox(e.ToString)
            Me.Cursor = Cursors.Default
        End Try
    End Sub

    Private Sub btnRetake_Click(sender As Object, e As EventArgs) Handles btnRetake.Click
        picCaptureClientID.Visible = False
        picPreviewClientID.Visible = True

        btnRetake.Enabled = False
        btnStart.Enabled = False
        btnTake.Enabled = True

        'restart
        CaptureVideo()
    End Sub

    Private Sub btnStart_Click(sender As Object, e As EventArgs) Handles btnStart.Click
        CaptureVideo()
        btnTake.Enabled = True
        btnStart.Enabled = False
        pTake = True
    End Sub
#End Region

#Region "Image Cropping"

    Dim tempCnt As Boolean         'check weather the roller is used or not

    Dim bm_dest As Bitmap
    Dim bm_source As Bitmap
    Dim i As Int16 = CShort(0.5)

    Dim cropX As Integer
    Dim cropY As Integer
    Dim cropWidth As Integer
    Dim cropHeight As Integer

    Dim oCropX As Integer
    Dim oCropY As Integer
    Dim cropBitmap As Bitmap
    Dim tmppoint As Point

    Public cropPen As Pen
    Public cropPenSize As Integer = 2 '2
    Public cropDashStyle As Drawing2D.DashStyle = Drawing2D.DashStyle.Solid
    Public cropPenColor As Color = Color.Red


    Private Sub picCaptureClientID_MouseDown(ByVal sender As System.Object, ByVal e As System.Windows.Forms.MouseEventArgs) Handles picCaptureClientID.MouseDown
        Try

            If e.Button = Windows.Forms.MouseButtons.Left Then

                cropX = e.X
                cropY = e.Y

                cropPen = New Pen(cropPenColor, cropPenSize)
                cropPen.DashStyle = DashStyle.DashDotDot
                Cursor = Cursors.Cross

            End If
            picCaptureClientID.Refresh()
        Catch exc As Exception
        End Try
    End Sub

    Private Sub picCaptureClientID_MouseMove(ByVal sender As Object, ByVal e As System.Windows.Forms.MouseEventArgs) Handles picCaptureClientID.MouseMove
        Try

            If picCaptureClientID.Image Is Nothing Then Exit Sub

            If e.Button = Windows.Forms.MouseButtons.Left Then

                picCaptureClientID.Refresh()
                cropWidth = e.X - cropX
                cropHeight = e.Y - cropY
                picCaptureClientID.CreateGraphics.DrawRectangle(cropPen, cropX, cropY, cropWidth, cropHeight)
            End If
            ' GC.Collect()

        Catch exc As Exception

            If Err.Number = 5 Then Exit Sub
        End Try

    End Sub

    Private Sub picCaptureClientID_MouseUp(ByVal sender As Object, ByVal e As System.Windows.Forms.MouseEventArgs) Handles picCaptureClientID.MouseUp
        Try
            Cursor = Cursors.Default
            Try

                If cropWidth < 1 Then
                    Exit Sub
                End If

                Dim rect As Rectangle = New Rectangle(cropX, cropY, cropWidth, cropHeight)
                Dim bit As Bitmap = New Bitmap(picCaptureClientID.Image, picCaptureClientID.Width, picCaptureClientID.Height)

                cropBitmap = New Bitmap(cropWidth, cropHeight)
                Dim g As Graphics = Graphics.FromImage(cropBitmap)
                g.InterpolationMode = Drawing2D.InterpolationMode.HighQualityBicubic
                g.PixelOffsetMode = Drawing2D.PixelOffsetMode.HighQuality
                g.CompositingQuality = Drawing2D.CompositingQuality.HighQuality
                g.DrawImage(bit, 0, 0, rect, GraphicsUnit.Pixel)
                PreviewPictureBox.Image = cropBitmap

            Catch exc As Exception
            End Try
        Catch exc As Exception
        End Try
    End Sub
#End Region


    Private Sub btnCancel_Click(sender As Object, e As EventArgs) Handles btnCancel.Click
        Me.Close()
    End Sub

    Private Sub loadFormControl()


    End Sub



    Private Sub loadClientImage()


    End Sub

    Private Sub btnSubmit_Click(sender As Object, e As EventArgs) Handles btnSubmit.Click
        If Not String.IsNullOrWhiteSpace(txtFirst.Text) AndAlso
        Not String.IsNullOrWhiteSpace(txtLast.Text) AndAlso
        Not String.IsNullOrWhiteSpace(txtNumber.Text) AndAlso
        Not String.IsNullOrWhiteSpace(cmbProvince.Text) AndAlso
        Not String.IsNullOrWhiteSpace(cmbCity.Text) AndAlso
        Not String.IsNullOrWhiteSpace(cmbBaranggay.Text) AndAlso
        Not String.IsNullOrWhiteSpace(cmbHouse.Text) Then
            If cropBitmap IsNot Nothing Then

            Else
                cropBitmap = pbIcon.Image
            End If


            Try
                DatabaseManager.OpenConnection()
                Dim connection As MySqlConnection = DatabaseManager.GetConnection()

                Dim insertQuery As String = "INSERT INTO patients (patients_image,first_name_patients,middle_name_patients,last_name_patients,extension,sex_patients,birthdate_patients,contact_number_patients,date_registered,province,city,baranggay,house_number,email) VALUES (@image, @fname,@mname, @lname, @ext, @sex, @bday, @number, @date_r, @province, @city, @baranngay,@house,@email)"
                Dim currentDate As DateTime = DateTime.Now
                Dim formattedDateRegister As String = currentDate.ToString("yyyy-MM-dd")
                Using cmd As New MySqlCommand(insertQuery, connection)
                    cmd.Parameters.AddWithValue("@image", cropBitmap)
                    cmd.Parameters.AddWithValue("@fname", txtFirst.Text)
                    cmd.Parameters.AddWithValue("@mname", txtMiddle.Text)
                    cmd.Parameters.AddWithValue("@lname", txtLast.Text)
                    cmd.Parameters.AddWithValue("@ext", txtExtension.Text)
                    cmd.Parameters.AddWithValue("@sex", cbSex.Text)

                    cmd.Parameters.AddWithValue("@number", txtNumber.Text)
                    Dim selectedDate As DateTime = dtpBday.Value.Date
                    Dim formattedDate As String = selectedDate.ToString("yyyy-MM-dd")
                    cmd.Parameters.AddWithValue("@bday", formattedDate)
                    cmd.Parameters.AddWithValue("@date_r", formattedDateRegister)
                    cmd.Parameters.AddWithValue("@province", cmbProvince.Text)
                    cmd.Parameters.AddWithValue("@city", cmbCity.Text)
                    cmd.Parameters.AddWithValue("@baranngay", cmbBaranggay.Text)
                    cmd.Parameters.AddWithValue("@house", cmbHouse.Text)
                    cmd.Parameters.AddWithValue("@email", txtEmail.Text)
                    cmd.ExecuteNonQuery()
                End Using


                MessageBox.Show("Data inserted successfully.", "Success", MessageBoxButtons.OK, MessageBoxIcon.Information)
                Me.Close()

            Catch ex As Exception
                MessageBox.Show("Error: " & ex.Message, "Error", MessageBoxButtons.OK, MessageBoxIcon.Error)

            Finally
                DatabaseManager.CloseConnection()



            End Try
        Else
            MessageBox.Show("Please fill in all required fields.", "Missing Information", MessageBoxButtons.OK, MessageBoxIcon.Warning)
        End If
    End Sub

    Private Sub tabCntrlMemApplication_SelectedIndexChanged(sender As Object, e As EventArgs) Handles tabCntrlMemApplication.SelectedIndexChanged

    End Sub

    Private Sub Panel1_Paint(sender As Object, e As PaintEventArgs) Handles Panel1.Paint

    End Sub

    Private Sub Label1_Click(sender As Object, e As EventArgs) Handles Label1.Click

    End Sub

    Private Sub txtNumber_KeyPress(sender As Object, e As KeyPressEventArgs) Handles txtNumber.KeyPress
        ' Allowing only numbers and control characters like backspace
        If Not Char.IsControl(e.KeyChar) AndAlso Not Char.IsDigit(e.KeyChar) Then
            e.Handled = True ' Suppress the key press
        End If
    End Sub

End Class